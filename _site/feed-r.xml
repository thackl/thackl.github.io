<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>thacklog</title>
        <description>Thomas Hackl &lt;br&gt; Coding Biologist</description>
        <link>//</link>
        <atom:link href="//feed-r.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Sun, 17 May 2020 10:02:43 +0200</pubDate>
        <lastBuildDate>Sun, 17 May 2020 10:02:43 +0200</lastBuildDate>
        <generator>Jekyll v3.6.2</generator>
        
            <item>
                <title>Add a language label to code chunks in pkgdown articles</title>
                <author>Thomas Hackl</author>
                <description>&lt;p&gt;
pkgdown nicely renders code chunks in your package's documentation
website. However, if you mix in non-R code snippets in your articles, it is
difficult to distinguish R code chunks from those written in other
languages. How nice would it be if each code chunk would have a small label to
indicate its content's language.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://pkgdown.r-lib.org/&quot;&gt;pkgdown&lt;/a&gt; is super useful for documenting your R packages. It is particularly well
suited to showcase small code examples. In some of my projects, on top of R code
chunks, I also provide code examples in other languages such as short Linux
command line code snippets I used to preprocess data before loading it into R.
&lt;/p&gt;

&lt;p&gt;
pkgdown renders code chunks in most common languages nicely, with syntax
highlighting, etc. However, it does not indicate what language is used in a
particular code chunk. For most projects, this is not a problem, because all
code chunks are R code anyway. But this behavior gets confusing when we mix
different languages in the same document.
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;img/pkgdown-no-code-labels.png&quot; alt=&quot;pkgdown-no-code-labels.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
To solve this issue, I wrote a small javascript hook that adds small labels to
each code chunk, indicating the language of its content. The hook comprises a
short jQuery function and some CSS instructions. Simply add the two snippets
below to your &lt;code&gt;pkgdown/extra.js&lt;/code&gt; and &lt;code&gt;pkgdown/extra.css&lt;/code&gt; to add the labels to
your pkgdown projects.
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;img/pkgdown-code-labels.png&quot; alt=&quot;pkgdown-code-labels.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;add to extra.js&lt;/span&gt;
&lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #daa520;&quot;&gt;addLang&lt;/span&gt;( &lt;span style=&quot;color: #4eee94;&quot;&gt;jQuery&lt;/span&gt; ) {
    $(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;div.sourceCode&quot;&lt;/span&gt;).each(&lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #4eee94;&quot;&gt;i&lt;/span&gt;, &lt;span style=&quot;color: #4eee94;&quot;&gt;v&lt;/span&gt;){
        &lt;span style=&quot;color: #8f62a6;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #4eee94;&quot;&gt;lang&lt;/span&gt; = $(&lt;span style=&quot;color: #a2cd5a;&quot;&gt;this&lt;/span&gt;).children(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;pre&quot;&lt;/span&gt;).attr(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;class&quot;&lt;/span&gt;).split(&lt;span style=&quot;color: #deb887;&quot;&gt;' '&lt;/span&gt;).pop()
        &lt;span style=&quot;color: #8f62a6;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #4eee94;&quot;&gt;Lang&lt;/span&gt; = lang[0].toUpperCase() + lang.slice(1)
        $(&lt;span style=&quot;color: #a2cd5a;&quot;&gt;this&lt;/span&gt;).before(&lt;span style=&quot;color: #deb887;&quot;&gt;'&amp;lt;div class=&quot;codelabel '&lt;/span&gt; + lang + &lt;span style=&quot;color: #deb887;&quot;&gt;'&quot;&amp;gt;'&lt;/span&gt; + Lang + &lt;span style=&quot;color: #deb887;&quot;&gt;' code&amp;lt;/div&amp;gt;'&lt;/span&gt; +
                        &lt;span style=&quot;color: #deb887;&quot;&gt;'&amp;lt;div class=&quot;codelabelspacer&quot;&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;)
    })
}
$( document ).ready(addLang)
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;add to extra.css &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #daa520;&quot;&gt;codelabel &lt;/span&gt;{
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;border&lt;/span&gt;: 2px solid &lt;span style=&quot;color: #000000; background-color: #ffffff;&quot;&gt;white&lt;/span&gt;;
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;background-color&lt;/span&gt;: &lt;span style=&quot;color: #000000; background-color: #eee;&quot;&gt;#eee&lt;/span&gt;;
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;z-index&lt;/span&gt;: 100;
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;position&lt;/span&gt;: absolute;
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;font-size&lt;/span&gt;: 60%;
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;font-weight&lt;/span&gt;: bold;
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;padding&lt;/span&gt;: 2px;
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;display&lt;/span&gt;: inline-block;
}
&lt;span style=&quot;color: #daa520;&quot;&gt;.codelabelspacer &lt;/span&gt;{
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;height&lt;/span&gt;: 12px;
}
&lt;/pre&gt;
&lt;/div&gt;
</description>
                <pubDate>Sat, 16 May 2020 00:00:00 +0200</pubDate>
                <link>//language-labels-for-pkgdown-code-chunks</link>
                <guid isPermaLink="true">//language-labels-for-pkgdown-code-chunks</guid>
                
                
                <category>R</category>
                
            </item>
        
            <item>
                <title>Automatically update your publication list using R scholar II - get a PDF</title>
                <author>Thomas Hackl</author>
                <description>&lt;p&gt;
&lt;a href=&quot;http://alecri.github.io/&quot;&gt;Alessio&lt;/a&gt; apparently read my blog post on &lt;a href=&quot;https://thackl.github.io/automatically-update-publications-with-R-scholar&quot;&gt;how to automatically update your
publication list using R and google scholar&lt;/a&gt;. He contacted me wondering if there
is also a solution to get a PDF. Good question, thanks!
&lt;/p&gt;

&lt;p&gt;
There are probably a few ways to get a PDF. Fancy ones might include the use of
&lt;a href=&quot;https://yihui.name/knitr/&quot;&gt;knitr&lt;/a&gt; or the great &lt;a href=&quot;https://pandoc.org/&quot;&gt;pandoc&lt;/a&gt; converter, likely involving a intermediate TEX file or
so. Here, however, I tried to aim for a fast and straight-forward workaround.
&lt;/p&gt;

&lt;p&gt;
Let us assume we already have a HTML version of our publication list, for
example, obtained as described in the post mentioned above. Converting HTML to
PDF can be a bit of a nightmare, particularly if you want to maintain the CSS
style of your website. What works for me is to use the Google Chrome API
function &lt;code&gt;chrome_print&lt;/code&gt; of the R package &lt;a href=&quot;https://github.com/rstudio/pagedown&quot;&gt;pagedown&lt;/a&gt;. It is not very flexible, but
you pretty much get what you already have on the HTML page in your PDF - with a
single command. The only requirement, you need to have Google Chrome installed.
&lt;/p&gt;

&lt;p&gt;
Here is my &lt;a href=&quot;assets/publications.pdf&quot;&gt;publication list as PDF&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #a2cd5a;&quot;&gt;library&lt;/span&gt;(pagedown)

chrome_print(
  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;link to my publication list w/o header/footer in html&lt;/span&gt;
  &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;https://thackl.github.io/publications-clean&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;the pdf to generate&lt;/span&gt;
  &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;publications.pdf&quot;&lt;/span&gt;
)
&lt;/pre&gt;
&lt;/div&gt;
</description>
                <pubDate>Tue, 17 Sep 2019 00:00:00 +0200</pubDate>
                <link>//automatically-update-publications-with-R-scholar-II-get-pdf</link>
                <guid isPermaLink="true">//automatically-update-publications-with-R-scholar-II-get-pdf</guid>
                
                
                <category>R</category>
                
            </item>
        
            <item>
                <title>Automatically update your publication list using R scholar</title>
                <author>Thomas Hackl</author>
                <description>&lt;p&gt;
I really dislike tedious tasks like updating my publication list on my
website. So here is a very short script that does the job for me. It uses the R
library &lt;a href=&quot;https://CRAN.R-project.org/package=scholar&quot;&gt;scholar&lt;/a&gt; to pull my publications from my google scholar profile. I then
use some quick &amp;amp; dirty string parsing to convert that data into a html
table. I'm sure there are a tons of more elegant ways out there, but this
worked, and only took me minutes to set up.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #a2cd5a;&quot;&gt;library&lt;/span&gt;(scholar)
&lt;span style=&quot;color: #a2cd5a;&quot;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&quot;color: #a2cd5a;&quot;&gt;library&lt;/span&gt;(glue)

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;escape some special chars, german umlauts, ...&lt;/span&gt;
&lt;span style=&quot;color: #daa520;&quot;&gt;char2html&lt;/span&gt; &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;(x){
  dictionary &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame(
    symbol = c(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;#228;&quot;&lt;/span&gt;,&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;#246;&quot;&lt;/span&gt;,&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;#252;&quot;&lt;/span&gt;,&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;#196;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;#214;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;#220;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;#223;&quot;&lt;/span&gt;),
    html = c(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;amp;auml;&quot;&lt;/span&gt;,&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;amp;ouml;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;amp;uuml;&quot;&lt;/span&gt;,&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;amp;Auml;&quot;&lt;/span&gt;,
             &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;amp;Ouml;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;amp;Uuml;&quot;&lt;/span&gt;,&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;amp;szlig;&quot;&lt;/span&gt;))
  &lt;span style=&quot;color: #8f62a6;&quot;&gt;for&lt;/span&gt;(i &lt;span style=&quot;color: #8f62a6;&quot;&gt;in&lt;/span&gt; 1:dim(dictionary)[1]){
    x &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; gsub(dictionary$symbol[i],dictionary$html[i],x)
  }
  x
}

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;my google scholar user id from my profile url&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;https://scholar.google.com/citations?user=b8bWNkUAAAAJ&amp;amp;hl=en&lt;/span&gt;
thackl &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;b8bWNkUAAAAJ&quot;&lt;/span&gt;

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;pull from google&lt;/span&gt;
html_1 &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; get_publications(thackl)

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;convert to htlm table - the ugly way ;)&lt;/span&gt;
html_2 &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; html_1 %&amp;gt;%
  as_tibble %&amp;gt;% arrange(desc(year)) %&amp;gt;%
  mutate(
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;#    &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;author=str_replace_all(author, &quot; (\\S) &quot;, &quot;\\1 &quot;),&lt;/span&gt;
    author=str_replace_all(author, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;([A-Z]) ([A-Z]) &quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;\\1\\2 &quot;&lt;/span&gt;),
    author=str_replace_all(author, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;, \\.\\.\\.&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot; et al.&quot;&lt;/span&gt;),
    author=str_replace_all(author, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;T Hackl&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;lt;b&amp;gt;T Hackl&amp;lt;/b&amp;gt;&quot;&lt;/span&gt;) &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;make my name fat&lt;/span&gt;
  ) %&amp;gt;% split(.$year) %&amp;gt;%
    map(&lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;(x){
      x &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; x %&amp;gt;%
        glue_data(&lt;span style=&quot;color: #deb887;&quot;&gt;'&amp;lt;tr&amp;gt;&amp;lt;td width=&quot;100%&quot;&amp;gt;{author} ({year}) &amp;lt;a href=&quot;https://scholar.google.com/scholar?oi=bibs&amp;amp;cluster={cid}&amp;amp;btnI=1&amp;amp;hl=en&quot;&amp;gt;{title}&amp;lt;/a&amp;gt;, {journal}, {number}&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;'&lt;/span&gt;) %&amp;gt;%
        str_replace_all(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;(, )+&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;lt;/p&amp;gt;&quot;&lt;/span&gt;) %&amp;gt;%
        char2html()
      x &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; c(&lt;span style=&quot;color: #deb887;&quot;&gt;'&amp;lt;table class=&quot;publication-table&quot; border=&quot;10px solid blue&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;&quot;, frame=&quot;&quot;&amp;gt;&amp;lt;tbody&amp;gt;'&lt;/span&gt;, x, &lt;span style=&quot;color: #deb887;&quot;&gt;'&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;'&lt;/span&gt;)
      &lt;span style=&quot;color: #8f62a6;&quot;&gt;return&lt;/span&gt;(x);
    }) %&amp;gt;% rev

html_3 &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; map2(names(html_2) %&amp;gt;% paste0(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;lt;h3&amp;gt;&quot;&lt;/span&gt;, ., &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;&amp;lt;/h3&amp;gt;&quot;&lt;/span&gt;), html_2, c) %&amp;gt;% unlist

html_4 &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; c(
  paste0(&lt;span style=&quot;color: #deb887;&quot;&gt;'&amp;lt;p style=&quot;text-align: right; margin-top: -40px;&quot;&amp;gt;&amp;lt;small&amp;gt;Last updated &amp;lt;i&amp;gt;'&lt;/span&gt;,
         format(Sys.Date(), format=&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;%B %d, %Y&quot;&lt;/span&gt;),
         &lt;span style=&quot;color: #deb887;&quot;&gt;'&amp;amp;ndash; Pulled automatically from my &amp;lt;a href=&quot;https://scholar.google.com/citations?hl=en&amp;amp;user=b8bWNkUAAAAJ&quot;&amp;gt;Google Scholar profile&amp;lt;/a&amp;gt;. See &amp;lt;a href=&quot;/automatically-update-publications-with-R-scholar&quot;&amp;gt;this post&amp;lt;/a&amp;gt; for how it works.&amp;lt;/small&amp;gt;&amp;lt;/p&amp;gt;'&lt;/span&gt;), html_3)

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;write the html list to a file&lt;/span&gt;
writeLines(html_4, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;../_includes/publications.html&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
</description>
                <pubDate>Tue, 27 Nov 2018 00:00:00 +0100</pubDate>
                <link>//automatically-update-publications-with-R-scholar</link>
                <guid isPermaLink="true">//automatically-update-publications-with-R-scholar</guid>
                
                
                <category>R</category>
                
            </item>
        
            <item>
                <title>Plotting a ggtree and ggplots side by side</title>
                <author>Thomas Hackl</author>
                <description>&lt;p&gt;
Plotting phylogenies and associated data side by side is a good way to explore
evolutionary patterns in your data.  In this post I will describe my approach
for creating such plots in R using &lt;a href=&quot;https://ggplot2.tidyverse.org/index.html&quot;&gt;ggplot&lt;/a&gt;, &lt;a href=&quot;https://guangchuangyu.github.io/software/ggtree/&quot;&gt;ggtree&lt;/a&gt;, and &lt;a href=&quot;https://github.com/thomasp85/patchwork&quot;&gt;patchwork&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
ggtree itself comes with a few methods (&lt;code&gt;gheatmap&lt;/code&gt;, &lt;code&gt;msaplot&lt;/code&gt;, &lt;code&gt;facet_plot&lt;/code&gt;) to
display additional data next to the trees. Those methods, however, always
combine the data and the tree within the same plot area. This considerably
limits customizability. I, therefore, decided to go down a different route, and
combine multiple individual plots in order to retain a high degree of
customizability.
&lt;/p&gt;

&lt;p&gt;
Let's start with a simple example. We need a dummy tree, and two dummy data sets
that we want to plot. Both, tree and data use the same labels to refer to the
different organisms.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #a2cd5a;&quot;&gt;library&lt;/span&gt;(tidyverse)
&lt;span style=&quot;color: #a2cd5a;&quot;&gt;library&lt;/span&gt;(ggtree)
&lt;span style=&quot;color: #a2cd5a;&quot;&gt;library&lt;/span&gt;(patchwork)

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;a tree&lt;/span&gt;
set.seed(1338)
tr &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; rtree(10)
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;and some dummy data&lt;/span&gt;
df1 &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; tibble(
  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;only some labels match&lt;/span&gt;
  label = c(tr$tip.label[sample(6, 6)], &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;u9&quot;&lt;/span&gt;, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;v9&quot;&lt;/span&gt;),
  value = label %&amp;gt;% str_sub(2) %&amp;gt;% as.numeric)
df2 &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; tibble(
  label = rep(tr$tip.label, 4),
  category = rep(1:4, each=10),
  value = rnorm(40, 0, 3))

&lt;span style=&quot;color: #daa520;&quot;&gt;no_legend&lt;/span&gt; &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;() theme(legend.position=&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;none&quot;&lt;/span&gt;)

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;plot the tree,&lt;/span&gt;
gg_tr &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggtree(tr) + geom_tiplab(align=&lt;span style=&quot;color: #98f5ff;&quot;&gt;TRUE&lt;/span&gt;) +
  scale_x_continuous(expand=expand_scale(0.2)) &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;make more room for the labels&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;the data points, the histogram and the heatmap&lt;/span&gt;
gg_hist &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggplot(df1, aes(label, value)) +
  geom_col(aes(fill=substr(label, 1, 1))) + no_legend()
gg_heat &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggplot(df2, aes(category, label)) + geom_tile(aes(fill=value)) +
  scale_fill_gradient2() + no_legend()

gg_tr + gg_hist + gg_heat + plot_annotation(tag_levels=&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;A&quot;&lt;/span&gt;)

ggsave(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;img/ggtree-composite-1.png&quot;&lt;/span&gt;, type=&lt;span style=&quot;color: #deb887;&quot;&gt;'cairo'&lt;/span&gt;, width=8, height=4)
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;img/ggtree-composite-1.png&quot; alt=&quot;ggtree-composite-1.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
So far so good. Now we want to reorder the data in the plots so it aligns with
the leaves in our tree.
&lt;/p&gt;

&lt;p&gt;
Under the hood, ggtrees are laid out on a numeric coordinate system. By default,
the leaves match whole numbers, from 1 to the number of leaves. The easiest way
to align data in other plots to the tree is to match the y-coordinates using
common labels. So let's start with that.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;tree_y()&lt;/code&gt; is a little helper function that takes a ggtree and a data frame with
a &lt;i&gt;label&lt;/i&gt; column. The function matches the ggtree and the data frame by the
label column and returns the new y-coordinates for the data. We will use this
function to transform the labels in our data on-the-fly in the ggplot aesthetics
argument.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #daa520;&quot;&gt;tree_y&lt;/span&gt; &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt;  &lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;(ggtree, data){
  &lt;span style=&quot;color: #8f62a6;&quot;&gt;if&lt;/span&gt;(!inherits(ggtree, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;ggtree&quot;&lt;/span&gt;))
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;stop&lt;/span&gt;(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;not a ggtree object&quot;&lt;/span&gt;)
  left_join(select(data, label), select(ggtree$data, label, y)) %&amp;gt;%
    pull(y)
}

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;replot histogram and heatmap, match the y-coords to the tree&lt;/span&gt;
gg_hist &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggplot(df1, aes(tree_y(gg_tr, df1), value)) +
  geom_col(aes(fill=substr(label, 1, 1))) + no_legend() +
  coord_flip() &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;flip this plot&lt;/span&gt;
gg_heat &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggplot(df2, aes(category, y=tree_y(gg_tr, df2))) +
  geom_tile(aes(fill=value)) +
  scale_fill_gradient2() + no_legend()

gg_tr + gg_hist + gg_heat + plot_annotation(tag_levels=&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;A&quot;&lt;/span&gt;)

ggsave(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;img/ggtree-composite-2.png&quot;&lt;/span&gt;, type=&lt;span style=&quot;color: #deb887;&quot;&gt;'cairo'&lt;/span&gt;, width=8, height=4)
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;img/ggtree-composite-2.png&quot; alt=&quot;ggtree-composite-2.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
OK, this doesn't look bad at all. The data in all plots is now reordered and
matches the order of the tree leaves. However, it doesn't align properly
yet. That has two reasons:
&lt;/p&gt;

&lt;p&gt;
First, the plotted data have different y-limits: our first data set is missing data
for the top tree leaf (t8), and in the heat map the tiles are centered around
the leaf y-coordinates, and actually extend outwards by 0.5 units.
&lt;/p&gt;

&lt;p&gt;
Second, the different plots also have different amounts of expansion space
around their outer data points. This is a ggplot feature, and explained under
the expand argument of the &lt;a href=&quot;https://ggplot2.tidyverse.org/reference/scale_continuous.html&quot;&gt;continuous scales&lt;/a&gt;: &quot;The defaults are to expand the
scale by 5% on each side for continuous variables, and by 0.6 units on each side
for discrete variables&quot;.
&lt;/p&gt;

&lt;p&gt;
To address those two related issues, we need a way to control the y-limits and
the expansion space around it for the tree and the plots. For the tree, it's
quite simple. All we need to do is settle on a fixed expansion space that gives
enough room for leaf-centered objects such as tiles and bars in aligned
plots. We don't have to do anything about the y-limits of the tree, because
those are our reference.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;scale_y_tree()&lt;/code&gt; is a simple wrapper around &lt;code&gt;scale_y_continuous()&lt;/code&gt;, that when
applied to the ggtree plot, resets the expansion space around the tree limits to
0.6 units on each side of the leaves.
&lt;/p&gt;

&lt;p&gt;
For the plots, it's a bit more involved, because we want to derive the y-limits
from the tree, rather than data. The way I made it work is by writing the
wrapper function &lt;code&gt;ggtreeplot()&lt;/code&gt;. The function basically behaves like &lt;code&gt;ggplot()&lt;/code&gt;,
but take a ggtree as an additional argument. It uses the ggtree to a) match the
y-coordinates of the data by common labels (just as we did on-the-fly for the
previous plots), and b) it computes new y-limits from the tree and adds those
and our predefined expansion space of 0.6 to the plot.
&lt;/p&gt;

&lt;p&gt;
The &lt;code&gt;flip&lt;/code&gt; parameter is necessary when x and y in the plot will be
flipped. Because in that case, we need to set our limits internally on the
x-axis, which will later become the y-axis.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-R&quot;&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;overwrite the default expand for continuous scales&lt;/span&gt;
&lt;span style=&quot;color: #daa520;&quot;&gt;scale_y_tree&lt;/span&gt; &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;(expand=expand_scale(0, 0.6), ...){
    scale_y_continuous(expand=expand, ...)
}

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;get the range of the ggtree y-axis data&lt;/span&gt;
&lt;span style=&quot;color: #daa520;&quot;&gt;tree_ylim&lt;/span&gt; &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;(ggtree){
  &lt;span style=&quot;color: #8f62a6;&quot;&gt;if&lt;/span&gt;(!inherits(ggtree, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;ggtree&quot;&lt;/span&gt;))
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;stop&lt;/span&gt;(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;not a ggtree object&quot;&lt;/span&gt;)
  range(ggtree$data$y)
}

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;plot data next to a ggtree aligned by shared labels&lt;/span&gt;
&lt;span style=&quot;color: #daa520;&quot;&gt;ggtreeplot&lt;/span&gt; &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt;(ggtree, data = &lt;span style=&quot;color: #98f5ff;&quot;&gt;NULL&lt;/span&gt;, mapping = aes(), flip=&lt;span style=&quot;color: #98f5ff;&quot;&gt;FALSE&lt;/span&gt;,
     expand_limits=expand_scale(0,.6), ...){
  
  &lt;span style=&quot;color: #8f62a6;&quot;&gt;if&lt;/span&gt;(!inherits(ggtree, &lt;span style=&quot;color: #deb887;&quot;&gt;&quot;ggtree&quot;&lt;/span&gt;))
    &lt;span style=&quot;color: #8f62a6;&quot;&gt;stop&lt;/span&gt;(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;not a ggtree object&quot;&lt;/span&gt;)

  &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;match the tree limits&lt;/span&gt;
  limits &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; tree_ylim(ggtree)
  limits[1] &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; limits[1] + (limits[1] * expand_limits[1]) - expand_limits[2]
  limits[2] &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; limits[2] + (limits[2] * expand_limits[3]) + expand_limits[4]
  
  &lt;span style=&quot;color: #8f62a6;&quot;&gt;if&lt;/span&gt;(flip){
    mapping &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; modifyList(aes_(x=~x), mapping)
    data &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; mutate(data, x=tree_y(ggtree, data))
    gg &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggplot(data=data, mapping = mapping, ...) +
      scale_x_continuous(limits=limits, expand=c(0,0))
  }&lt;span style=&quot;color: #8f62a6;&quot;&gt;else&lt;/span&gt;{
    mapping &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; modifyList(aes_(y=~y), mapping)
    data &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; mutate(data, y=tree_y(ggtree, data))
    gg &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggplot(data=data, mapping = mapping, ...) +
      scale_y_continuous(limits=limits, expand=c(0,0))
  }
  gg
}

&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;get rid of superfluous axis - this works after coord_flip, so it also works&lt;/span&gt;
&lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;for the rotated histogram&lt;/span&gt;
&lt;span style=&quot;color: #daa520;&quot;&gt;no_y_axis&lt;/span&gt; &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color: #8f62a6;&quot;&gt;function&lt;/span&gt; () 
  theme(axis.line.y = element_blank(), 
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now we can plot our tree and the data side by side using our new functions. We
plot the tree as before but add the fixed y scale. For the data, we replace the
&lt;code&gt;ggplot()&lt;/code&gt; call with the &lt;code&gt;ggtreeplot()&lt;/code&gt; call. Setting the y-aesthetic (or x in
case of flipped plots) is no longer necessary. &lt;code&gt;ggplotree()&lt;/code&gt; assumes that it
should point to the coordinates we got from matching the labels from the data to
the tree.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-R&quot;&gt;gg_tr &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggtree(tr) + geom_tiplab(align=&lt;span style=&quot;color: #98f5ff;&quot;&gt;TRUE&lt;/span&gt;) +
  scale_x_continuous(expand=expand_scale(0.2)) + &lt;span style=&quot;color: #7f7f7f;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #7f7f7f;&quot;&gt;make more room for the labels&lt;/span&gt;
  scale_y_tree()
gg_hist &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggtreeplot(gg_tr, df1, aes(y=value), flip=&lt;span style=&quot;color: #98f5ff;&quot;&gt;TRUE&lt;/span&gt;) +
  geom_col(aes(fill=substr(label, 1, 1))) + no_legend() +
  coord_flip() + no_y_axis()
gg_heat &lt;span style=&quot;color: #a2cd5a;&quot;&gt;&amp;lt;-&lt;/span&gt; ggtreeplot(gg_tr, df2, aes(x=category)) + geom_tile(aes(fill=value)) +
  scale_fill_gradient2() + no_legend() + no_y_axis() 

gg_tr + gg_hist + gg_heat + plot_annotation(tag_levels=&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;A&quot;&lt;/span&gt;)

ggsave(&lt;span style=&quot;color: #deb887;&quot;&gt;&quot;img/ggtree-composite-3.png&quot;&lt;/span&gt;, type=&lt;span style=&quot;color: #deb887;&quot;&gt;'cairo'&lt;/span&gt;, width=8, height=4)
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;img/ggtree-composite-3.png&quot; alt=&quot;ggtree-composite-3.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Et voilà! A tree and two beautiful plots, side by side, and perfectly
aligned. The grammar for this final plot is pretty much identical to what we
used for the initial unaligned ggtree/ggplots. This makes it very easy to go
from a set of generic plots to this composite plot. At the same time, we retain
the level modularity and customizability that we had with the original
ggplots. This, in my opinion, is what makes this approach powerful.
&lt;/p&gt;
</description>
                <pubDate>Mon, 08 Oct 2018 00:00:00 +0200</pubDate>
                <link>//ggtree-composite-plots</link>
                <guid isPermaLink="true">//ggtree-composite-plots</guid>
                
                
                <category>R</category>
                
                <category>genomics</category>
                
            </item>
        
    </channel>
</rss>
